#!/usr/bin/env bash
#  Last update: 2015-11-30 12:56
#
# Steps:
# 1 . run create_top_billed.sh in imdb_data on the utf-8.dat file.
# 2.  run joinlines.rb -n on the actors actresses.topbilled file
#   this generates dbf files
# 2b, if you run without -n then it joins in one line all movies, and creates .dat file
#      this would use the actors.list.utf-8 file (from imdb_data) and create .dat.
# 3. Now run this to change the order and separate the fields.
#  PRUNING should be optional and not depend on any given format
#  We need to consolidate the process so that if the files are refreshed yearly we
#  can easily re-run.
# # :BUG:11/30/2015 00:49:: Now that we take billing in two digits
#  the sort program puts <11> before <1>. We need to remove the bracket and sort
#  numeric one second key or else put a 0 before since ones.

export COLOR_RED="\\033[0;31m"
export COLOR_GREEN="\\033[0;32m"
export COLOR_BLUE="\\033[0;34m"
export COLOR_YELLOW="\\033[1;33m"
export COLOR_WHITE="\\033[1;37m"
export COLOR_DEFAULT="\\033[0m"
export COLOR_BOLD="\\033[1m"
export COLOR_BOLDOFF="\\033[22m"

pbold() {
    echo -e "${COLOR_BOLD}$*${COLOR_BOLDOFF}"
}
pinfo() {
    echo -e "${COLOR_BOLD}${COLOR_YELLOW}$*${COLOR_BOLDOFF}${COLOR_DEFAULT}"
}
perror() {
    echo -e "${COLOR_BOLD}${COLOR_RED}$*${COLOR_BOLDOFF}${COLOR_DEFAULT}" <&2
  #echo -e "$0: $*" >&2
}

pdone() {
    text=${*:-"Done."}
    echo -e "${COLOR_BOLD}${COLOR_GREEN}${text}${COLOR_BOLDOFF}${COLOR_DEFAULT}" <&2
}
# this file already has normalized data
# first col is actress second is movie name. 
# BUT movie name as character name and billing no.
if [  $# -eq 0 ]; then
    echo "Please pass --actors or --actresses or --directors"
    exit
else
    case $1 in
        --actor|--actors)
            stub="actors"
            ;;
        --actress|--actresses)
            stub="actresses"
            ;;
        --director|--directors)
            stub="directors"
            echo "Sorry this should not be here"
            exit 1
            ;;
        *)
            perror "Wrong input. "
            echo "Please pass --actors or --actresses "
            exit
            ;;
    esac
fi
[[ -z "$stub" ]] && { echo "Error: $stub blank." 1>&2; exit 1; }
out="movie_$stub.dbf"
infile="$stub.topbilled.dbf"
if [[ ! -f "$infile" ]]; then
    echo "$infile not found"
    exit 1
fi
echo
pbold "$out will be created."
echo
TAB=$'\t'
DELIM=$TAB
#echo "make more fields so we can use data properly"
#echo "put tab before billin number and after film name ..."
echo
cat <<!

This process takes the normalized file generated by joinlines.rb
and inserts TABS, and then resorts the file on movie and cast billing number
so that we can query cast of a movie, with top billed actors in the right order

!
pinfo "Inserting TAB character after movie name, and before billing number so data is sortable ..."
#gsed "s/\(<[0-9]>\)$/${DELIM}\1/;s/\(([0-9?]\{4\})\)/\1${DELIM}/;s/\(([0-9?]\{4\}\/[IV]\+)\)/\1${DELIM}/;" $infile > t.t
# change since we now take 10-19 also 11/30/2015
gsed "s/<\(1[0-9]\)>$/${DELIM}\1/;s/<\([0-9]\)>$/${DELIM}0\1/;s/\(([0-9?]\{4\})\)/\1${DELIM}/;s/\(([0-9?]\{4\}\/[IV]\+)\)/\1${DELIM}/;" $infile > t.t
pdone
echo
wc -l t.t
head t.t | grep "$DELIM"
echo
pinfo "Switching columns: Movie, billing no, actor name, character name... " 
awk -F$'\t' '{ print $2, $4, $1, $3; }' OFS=$'\t' t.t > t.tt
pdone
echo
pinfo "Sorting on movie and billing ,,,"
sort -k1,2 -t'	' t.tt > $out
pdone
pdone " ======= Process over."
pbold "After both files processed then run command:"
echo "sort movie_actresses.dbf movie_actors.dbf > movie_cast.tsv"
echo
wc -l $out
ls -lh $out
echo
head $out
echo
grep '^Casabla' $out | column -t -s$'\t'
echo "-----------------------------------"
echo 
grep '^Gone with the W' $out | column -t -s$'\t'
